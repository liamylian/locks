// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/study-only/go-locks (interfaces: LockFactory)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	go_locks "github.com/study-only/go-locks"
	reflect "reflect"
)

// MockLockFactory is a mock of LockFactory interface
type MockLockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockLockFactoryMockRecorder
}

// MockLockFactoryMockRecorder is the mock recorder for MockLockFactory
type MockLockFactoryMockRecorder struct {
	mock *MockLockFactory
}

// NewMockLockFactory creates a new mock instance
func NewMockLockFactory(ctrl *gomock.Controller) *MockLockFactory {
	mock := &MockLockFactory{ctrl: ctrl}
	mock.recorder = &MockLockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLockFactory) EXPECT() *MockLockFactoryMockRecorder {
	return m.recorder
}

// NewLock mocks base method
func (m *MockLockFactory) NewLock(arg0 string) go_locks.TryLocker {
	ret := m.ctrl.Call(m, "NewLock", arg0)
	ret0, _ := ret[0].(go_locks.TryLocker)
	return ret0
}

// NewLock indicates an expected call of NewLock
func (mr *MockLockFactoryMockRecorder) NewLock(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLock", reflect.TypeOf((*MockLockFactory)(nil).NewLock), arg0)
}
