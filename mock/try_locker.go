// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/study-only/go-locks (interfaces: TryLocker)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTryLocker is a mock of TryLocker interface
type MockTryLocker struct {
	ctrl     *gomock.Controller
	recorder *MockTryLockerMockRecorder
}

// MockTryLockerMockRecorder is the mock recorder for MockTryLocker
type MockTryLockerMockRecorder struct {
	mock *MockTryLocker
}

// NewMockTryLocker creates a new mock instance
func NewMockTryLocker(ctrl *gomock.Controller) *MockTryLocker {
	mock := &MockTryLocker{ctrl: ctrl}
	mock.recorder = &MockTryLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTryLocker) EXPECT() *MockTryLockerMockRecorder {
	return m.recorder
}

// TryLock mocks base method
func (m *MockTryLocker) TryLock() error {
	ret := m.ctrl.Call(m, "TryLock")
	ret0, _ := ret[0].(error)
	return ret0
}

// TryLock indicates an expected call of TryLock
func (mr *MockTryLockerMockRecorder) TryLock() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockTryLocker)(nil).TryLock))
}

// Unlock mocks base method
func (m *MockTryLocker) Unlock() error {
	ret := m.ctrl.Call(m, "Unlock")
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock
func (mr *MockTryLockerMockRecorder) Unlock() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockTryLocker)(nil).Unlock))
}
